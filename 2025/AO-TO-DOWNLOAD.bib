@inproceedings{10.1007/978-981-96-1621-3_13,
	abstract = {Verifying hybrid system designs is complex due to the integration of discrete and continuous features, requiring formal verification, simulation, and testing. This paper presents a strategy for generating Simulink models from verified hybridised Event-B models, which use a correct-by-construction approach to progressively build both types of behaviours. A key challenge in simulating these models is synchronising the discrete and continuous elements. Our objective is to translate hybridised Event-B models into Simulink, with Stateflow representing the discrete components and MATLAB function blocks for the continuous ones. We illustrate this process through a water tank case study, demonstrating formal modelling, verification, and subsequent simulation of the generated Simulink model.},
	author = {Neeraj Kumar Singh and Guillaume Dupont and Yamine Aït Ameur and Marc Pantel},
	booktitle = {Software Fault Prevention, Verification, and Validation},
	doi = {10.1007/978-981-96-1621-3_13},
	keywords = {Hybrid systems, Proof-based verification, Animation and Simulation, Event-B, Simulink},
	month = {jan},
	publisher = {Springer},
	title = {Generating Simulink Models from Hybridised Event-B Models},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-981-96-1621-3_13},
	year = 2025
}

@inproceedings{10.1007/978-3-031-59235-5_6,
	abstract = {Domain-Specific Languages allow domain experts to specify their knowledge in such a way that software can be generated based on those specifications. In the context of a project using a humanoid robot Pepper as coach in therapies of post stroke patients we developed the language TaskDSL4Pepper and StateDSL4Pepper. They allow therapists to specify the behavior of a robot based on the two concepts of task models and hierarchical state machines. The paper discusses both languages that support commands like say ?< text > , show ?< image > , play ?< video > and raiseArms . First feedback from therapists in comparing both languages is discussed.},
	author = {Peter Forbrig and Alexandru Umlauft and Mathias Kühn and Anke Dittmar},
	booktitle = {Engineering Interactive Computer Systems. EICS 2023 International Workshops and Doctoral Consortium},
	doi = {10.1007/978-3-031-59235-5_6},
	keywords = {Domain-Specific Languages, Humanoid Robot Pepper, Behavior},
	month = {jan},
	publisher = {Springer},
	title = {Two Concepts of Domain-Specific Languages for Therapists to Control a Humanoid Robot},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-59235-5_6},
	year = 2024
}

@article{10.1007/s12369-025-01254-1,
	abstract = {Robotic technologies have not only been used in factories, but increasingly in various environments in people’s daily lives. Robots are used as assistive devices and through interaction with these devices it is possible to expand the physical and cognitive capabilities of humans. A new class of robots, Socially Assistive Robots (SARs), arises from the intersection of two other classes, assistive robots, which provide assistance, usually in healthcare settings, and interactive social robots, that communicate with the user. This work proposes an XML-based domain specific language (DSL) to facilitate the specification of interactive sessions for SARs. The proposed language is called EvaML and was designed for an open-source robotics platform. Although firstly implemented and used with EVA, EvaML can also be used with other SARs with similar communication affordances. To evaluate the EvaML language, an experiment was conducted with 12 software developers. Participants assessed EvaML with regards to clarity, effectiveness, perceived ease of use and usability according to 9 cognitive dimensions of the CDN framework (Cognitive Dimensions of Notations). EvaML was also successfully used by another group of 12 high school students and teachers in a series of activities where they designed and implemented interactive educational applications for EVA. Results indicate that EvaML is perceived as easy to use and usable, making it an adequate tool to enact interaction designs for a SAR platform considering different user profiles and levels of knowledge.},
	author = {Marcelo Marques da Rocha and Jesus Favela and Débora C. Muchaluat-Saade},
	doi = {10.1007/s12369-025-01254-1},
	journal = {International Journal of Social Robotics},
	keywords = {Domain specific languages, EvaML, Cognitive dimensions, Socially assistive robots},
	month = {may},
	page = {1–29},
	publisher = {Springer},
	title = {Design and Evaluation of an XML-Based Language for Programming Socially Assistive Robots},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/s12369-025-01254-1},
	year = 2025
}

@inproceedings{10.1007/978-3-031-21595-7_9,
	abstract = {Safety-critical systems are increasingly model-based, since model-based system engineering (MBSE) paradigm reduces the time-to-market and allows evolving systems at different abstraction levels. Different languages have been proposed recently enabling to facilitate the modeling process and shorten the development life-cycle. However, these languages may be used at one or many modeling steps regarding the semantics of their artefacts. Capella language is one of these languages that gained popularity recently. It is dedicated to system engineering and its use may very beneficial for safety-critical system. However, designing with Capella is considered as semi-formal. Thus, the approach presented in this paper stands for systematic formal verification of Capella’s behavioral models using Event-B method in a transparent way. Our proposal translates Capella models into Event-B specifications using automatic model-to-model transformations dedicated to Capella designers. The verification of correctness of the transformed models is provided by the ProB model-checker. An automatic lighting system is treated as a case study to validate of our contribution.},
	author = {Khaoula Bouba and Abderrahim Ait Wakrime and Yassine Ouhammou and Redouane Benaini},
	booktitle = {Model and Data Engineering},
	doi = {10.1007/978-3-031-21595-7_9},
	keywords = {Model-based system engineering, Formal methods, Capella/arcadia, Event-b, Meta-model, Operational analysis},
	month = {jan},
	publisher = {Springer},
	title = {Towards the Strengthening of Capella Modeling Semantics by Integrating Event-B: A Rigorous Model-Based Approach for Safety-Critical Systems},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-21595-7_9},
	year = 2023
}



@inproceedings{10.1007/978-3-031-38821-7_7,
	abstract = {Decomposition allows for managing complexity. We show that executable models of behaviour are significantly more decomposable when using a time-triggered semantics than an event-driven semantics. Therefore, we adopt logic-labelled finite machines LLFSMs and show that deterministic static schedules are derived to guarantee value-domain properties and time-domain properties. We illustrate that such a decomposition goes a long way in avoiding the combinatorial space explosion that occurs when attempting to formally verify executable behaviour models. We argue for parametrised machines to foster decomposability and analyse what aspects jeopardise taming the size of Kripke structures for formal verification. We provide three case studies to show that we can transform the models into small, timed Kripke structures and that components can be verified separately by the nuXmv model checker to achieve formal system verification.},
	author = {Callum McColl and Vladimir Estivill-Castro and Morgan McColl and René Hexel},
	booktitle = {Model-Driven Engineering and Software Development},
	doi = {10.1007/978-3-031-38821-7_7},
	keywords = {Systems engineering, Decomposition, Real-time Systems, Timing properties, Formal Verification},
	month = {jan},
	publisher = {Springer},
	title = {Decomposable and Executable Models for Verification of Real-Time Systems},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-38821-7_7},
	year = 2023
}

@inproceedings{10.1007/978-981-96-2684-7_19,
	abstract = {There are two challenges in the GUI code generation tasks: insufficient image feature extraction capability and low accuracy of code generation. Existing methods can handle simple GUI datasets well but have difficulty with complex GUI datasets. We propose a method for automatic code generation from GUI screenshots with vision-language models. Our method uses a multimodal information fusion module to fuse feature information from images and code efficiently. To improve the accuracy and feature extraction capability of GUI code generation, we use a combination of automated metrics to evaluate the performance of our method. The multiple experimental results demonstrate that our method achieves better performance among existing methods on both existing public and newly constructed datasets in the GUI code generation field. In particular, the BLUE4 score has been improved by 27},
	author = {Jingbin Liang and Jing Liang and Shuang Li},
	booktitle = {Computer Animation and Social Agents},
	doi = {10.1007/978-981-96-2684-7_19},
	keywords = {GUI, code generation, vision-language models, attention mechanism, multimodal fusion},
	month = {jan},
	publisher = {Springer},
	title = {Automatic Code Generation from GUI Screenshots with Vision-Language Models},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-981-96-2684-7_19},
	year = 2025
}

@inproceedings{10.1007/978-3-031-25182-5_19,
	abstract = {Model-based systems engineering (MBSE) combines the rigor of systems engineering with formal models to support communication in multidisciplinary engineering. With industrial adoption of MBSE, the maturity of modeling environments supporting MBSE increased. Still, efficient means to integrate computational design methods in MBSE are missing. Here, we present a method that enables systems engineers to directly integrate computational methods for solving design tasks. The method relies on established semantics of the systems modeling language (SysML) and therefore can be directly integrated with existing system models so to avoid redundant knowledge formalizations for computational methods. Next, model transformations are applied to generate the mathematical model based on the relevant parts of the system model. These temporary models are used to solve the design task and generate output that is fed back to the system model. Therefore, the proposed method contributes by relying on a single and comprehensible knowledge formalization understandable to engineers. Further, it enables systems engineers to formalize design tasks for automated reasoning themselves by bundling the complexity of the mathematical modeling within the model transformations. An industrial case for designing sealing elements for piping is used to illustrate the potential of the proposed approach. Future work needs to further elaborate on automated selection of appropriate mathematical methods as well as computational support for the identification of opportunities for integration of computational design methods readily while developing a system model.},
	author = {Eugen Rigger and Simon Rädler and Tino Stankovic},
	booktitle = {Product Lifecycle Management. PLM in Transition Times: The Place of Humans and Transformative Technologies},
	doi = {10.1007/978-3-031-25182-5_19},
	keywords = {Model-based systems engineering, SysML, Computational design method, Design automation},
	month = {jan},
	publisher = {Springer},
	title = {Integrating Computational Design Support in Model-Based Systems Engineering Using Model Transformations},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-25182-5_19},
	year = 2023
}

@inproceedings{10.1007/978-3-031-50974-2_11,
	abstract = {Process monitoring and conformance checking analyze process events describing process executions. However, such events are not always available or in a form suitable for these analysis tasks, for example for manual processes and (semi-)automated processes whose executions are not controlled by a Process-Aware Information System. To bridge this gap, we propose to leverage Internet of Things (IoT) technologies for sensing low-level events and abstracting them into high-level process events to enable process monitoring and conformance checking. We propose an event-centric metamodel for monitoring and conformance checking systems that is agnostic with respect to process characteristics such as level of automation, system support, and modeling paradigm. We demonstrate the applicability of the metamodel by instantiating it for processes represented by different modeling paradigms.},
	author = {Marco Franceschetti and Ronny Seiger and Barbara Weber},
	booktitle = {Business Process Management Workshops},
	doi = {10.1007/978-3-031-50974-2_11},
	keywords = {Process monitoring, Conformance checking, IoT},
	month = {jan},
	publisher = {Springer},
	title = {An Event-Centric Metamodel for IoT-Driven Process Monitoring and Conformance Checking},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-50974-2_11},
	year = 2024
}








@inproceedings{10.1007/978-3-031-51452-4_9,
	abstract = {In this work we explore the potential of using a Petri Nets inspired graphic interface supporting a character action modeling mechanic to develop computational thinking skills in a game-based learning environment. We conceived a proof-of-concept paper prototype as a probe to perform gameplay rehearsals and distill insights on how young players would appropriate it. A qualitative research approach was used to study gameplay sessions and semi-structured interviews, coding player actions and dialogue. We were able to gain insights on how the design of the game components and its mechanics mimicking Petri Nets provided an accessible way for players to perform the game activities by modeling behaviors of game characters. The integration of an interface design for action modeling inspired by Petri Nets and the use of symbols for encoding conditions, actions and outcomes, allowed players to model complex sequences of behavior, recognize patterns, decompose in-game activities, and work with abstractions such as conditions, consequences and steps. This enabled players’ articulation of cause-and-effect relationships, leading to the consolidation of computational thinking skills. This work provides insights for exploring similar design patterns in gameplay to enhance Computational Thinking.},
	author = {Valéria Moreira Pinto and Mariana Seiça and Licínio Roque},
	booktitle = {Videogame Sciences and Arts},
	doi = {10.1007/978-3-031-51452-4_9},
	keywords = {Player Modeled Actions, Computational thinking, Game Design, Petri Nets, STEAM},
	month = {jan},
	publisher = {Springer},
	title = {How Players Develop Computational Thinking While Modeling Character Behaviors in Gameplay},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-51452-4_9},
	year = 2024
}

@inproceedings{10.1007/978-3-031-61433-0_1,
	abstract = {Nowadays Discrete Event Systems (DESs) require complex and large models, for which distributed simulation engines become, in practice, the tools used to understand and analyze their behavior. The feasibility and efficiency of a distributed simulation of these large-scale models is strongly dependent of the information that can be obtained from the models, previously to the simulation process itself. This information can give assistance to the generation of an initial partition of the model, allowing a well balanced workload among the individual simulation engines deployed, or in the generation of the predicates to be evaluated in order to determine the enabling of transitions; or the computation of look-ahead information in conservative strategies of distributed simulation. Petri nets allow to obtain information from the structure that can be used to advance conclusions or properties about the course of a simulation. This information can be usefull either independently of the considered initial marking, or parameterised by its initial choice. This structural information can be obtained in modelling phase, completed in simulation time and re-elaborated from the simulation results, and therefore associated to the model or modules of the model in such a way that can be harnessed in further simulations where these nets will be used. Last but no least, the maintenance of the structure of the Petri net during the simulation (in an interpreted simulation instead of a compiled one) allows to make load balancing during the simulation or to federate with legacy simulators, in an easier way than using other kind of specification models or simulation schemes.},
	author = {José-Manuel Colom},
	booktitle = {Application and Theory of Petri Nets and Concurrency},
	doi = {10.1007/978-3-031-61433-0_1},
	keywords = {Petri Nets, Structural Analysis, Distributed Simulation, Discrete Event Systems},
	month = {jan},
	publisher = {Springer},
	title = {Harnessing Structure Theory of Petri Nets in Discrete Event System Simulation},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-61433-0_1},
	year = 2024
}


@inproceedings{10.1007/978-3-031-89471-8_31,
	abstract = {Ensuring reliable performance in tasks with high variability is an increasingly important task in the engineering process of robotics applications. This paper introduces an extended toolchain leveraging Behaviour-Driven Development to specify acceptance criteria and high-quality simulations to execute acceptance tests. We demonstrate the effectiveness of the testing approach in a dynamic sorting task with objects picked from a moving conveyor using a Franka Panda robot system. The contributions include an extended domain-specific language for specifying acceptance criteria and an implementation for automated testing of sorting scenarios using NVIDIA IsaacSim. We conclude with a discussion on the current state and future work on acceptance testing for robotics.},
	author = {Bastian Hunecke and Minh Nguyen and Nico Hochgeschwender and Sebastian Wrede},
	booktitle = {European Robotics Forum 2025},
	doi = {10.1007/978-3-031-89471-8_31},
	keywords = {Robot system and software engineering, Robot manipulation, Acceptance testing},
	month = {jan},
	publisher = {Springer},
	title = {Specification and Execution of Robotic Acceptance Tests for Object Sorting},
	url = {http://link.springer.com/openurl/pdf?id=doi:10.1007/978-3-031-89471-8_31},
	year = 2025
}